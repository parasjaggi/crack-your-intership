public:
    bool check(int x,int y,int n){
        if(x>=0 && x<n && y>=0 && y<n)return true;
        return false;
    }
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int n)
	{
	    vector<vector<bool>>vis(n,vector<bool>(n,false));
	    //a knight can make 8 moves so we make directional array for this
	    int dx[]={2,2,-2,-2,1,1,-1,-1};
	    int dy[]={1,-1,1,-1,2,-2,2,-2};
	    //we will use bfs
	    queue<pair<int,int>>q;
	    vector<vector<int>>dis(n,vector<int>(n,0));
	    q.push({KnightPos[0]-1,KnightPos[1]-1});
	    vis[KnightPos[0]-1][KnightPos[1]-1]=true;
	    while(!q.empty()){
	        auto cur=q.front();
	        q.pop();
	        if(cur.first==TargetPos[0]-1 && cur.second==TargetPos[1]-1){
	            return dis[cur.first][cur.second];
	        }
	        for(int i=0;i<8;i++){
	            int x=cur.first+dx[i];
	            int y=cur.second+dy[i];
	            if(check(x,y,n) && !vis[x][y]){
	                q.push({x,y});
	                vis[x][y]=true;
	                dis[x][y]=dis[cur.first][cur.second]+1;
	            }
	        }
	    }
	    return -1;
	}
