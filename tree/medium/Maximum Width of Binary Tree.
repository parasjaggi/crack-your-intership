/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)return 0;
        int ans=0;
        queue<pair<TreeNode*,int>>q;//node and index
        q.push({root,0});
        while(!q.empty()){
            int siz=q.size();//pura q khali karna hota each time
            int mini=q.front().second;//first guy ka index as it would be min on that level
            int first,last;
            for(int i=0;i<siz;i++){
                int cur_ind=q.front().second-mini;//to avoid overflow and make each level start from 0
                TreeNode* node=q.front().first;
                q.pop();
                if(i==0)first=cur_ind;
                if(i==siz-1)last=cur_ind;
                if(node->left){
                    q.push({node->left,(long long)2*cur_ind+1});
                }
                if(node->right){
                    q.push({node->right,(long long)2*cur_ind+2});
                }
            }
            ans=max(ans,(last-first+1));
        }
        return ans;
    }
};
