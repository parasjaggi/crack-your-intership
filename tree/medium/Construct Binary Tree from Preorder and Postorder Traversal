    TreeNode* build(vector<int>& preorder,int prestart,int preend,vector<int>& postorder,int poststart,int postend,unordered_map<int,int>&pos){
        
        TreeNode* root=new TreeNode(preorder[prestart]);
        if(prestart==preend)return root;//leaf nodes
        
        int postind=pos[preorder[prestart+1]];//position of left subtree root in post
        //now no. of left subtree elements
        int len=postind-poststart+1;
        root->left=build(preorder,prestart+1,prestart+len,postorder,poststart,poststart+len-1,pos);
        if(postind+1==postend)return root;//right nhi hoga as last is root itself
        root->right=build(preorder,prestart+len+1,preend,postorder,postind+1,postend-1,pos);
        
        return root;
    }
    
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int,int>pos;
        for(int i=0;i<postorder.size();i++){
            pos[postorder[i]]=i;
        }
        return build(preorder,0,preorder.size()-1,postorder,0,postorder.size()-1,pos);
        
    }
