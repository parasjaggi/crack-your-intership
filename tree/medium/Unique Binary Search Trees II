vector<TreeNode*> help(int start,int end){
        vector<TreeNode*>ans;
        if(start>end){
            ans.push_back(NULL);
            return ans;
        }
        if(start==end){
            //only one node
            ans.push_back(new TreeNode(start));
            return ans;
        }
        for(int i=start;i<=end;i++){
            vector<TreeNode*>leftpossibletree;
            vector<TreeNode*>rightpossibletree;
            
            leftpossibletree=help(start,i-1);//we generate all left tree combination and store their heads
            rightpossibletree=help(i+1,end);
            for(auto leftroot:leftpossibletree){
                for(auto rightroot:rightpossibletree){
                    //now total combination of all trees of left with right
                    TreeNode* root=new TreeNode(i);
                    root->left=leftroot;
                    root->right=rightroot;
                    ans.push_back(root);//push this combination in ans
                }
            }
        }
        return ans;
    }
    vector<TreeNode*> generateTrees(int n) {
        return help(1,n);
    }
