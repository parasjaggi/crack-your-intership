vector<long long>subtree_ans;
    vector<int>ans;
    vector<int>no_nodes;//of tree rooted at i
    
    void dfs(int root,int parent,vector<vector<int>>& edges){//by this we find subtree_ans,no_nodes for all
        int noofnodes=1;
        long long ansofsubtree=0;
        for(auto child : edges[root]){
           if(child==parent)continue;
           dfs(child,root,edges);
           noofnodes+=no_nodes[child];
           ansofsubtree+=(subtree_ans[child]+no_nodes[child]); 
        }
        subtree_ans[root]=ansofsubtree;
        no_nodes[root]=noofnodes;
    }
     
    void help(int root,int parent,int ans_except_this_node,int &totalnodes,vector<vector<int>>& edges){
        ans[root]=subtree_ans[root]+(ans_except_this_node+(totalnodes-no_nodes[root]));
        
        for(auto child:edges[root]){
            if(child!=parent){
                help(child,root,(ans[root]-(subtree_ans[child]+no_nodes[child])),totalnodes,edges);
            }
        }
    }
    
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
      vector<vector<int>>edge(n);
        for(int i=0;i<edges.size();i++){
            edge[edges[i][0]].push_back(edges[i][1]);
            edge[edges[i][1]].push_back(edges[i][0]);
        }
        subtree_ans.resize(n);
        ans.resize(n);
        no_nodes.resize(n);
        
        dfs(0,-1,edge);
        help(0,-1,0,n,edge);
        return ans;
    }
};
