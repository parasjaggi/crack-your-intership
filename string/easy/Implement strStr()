class Solution {
public:
    void computeLPSArray(string pat, int m, vector<int>&lps){
    int len=0;//length of the previous longest prefix suffix
    lps[0]=0;//// lps[0] is always 0
    int i = 1;
    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else // (pat[i] != pat[len])
        {
            if (len != 0) {
                len = lps[len - 1];
                // Also, note that we do not increment
                // i here
            }
            else // if (len == 0)
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
void KMPSearch(string pat, string txt,vector<int>&index)
{
    int n=txt.size();
    int m=pat.size();
  
    // create lps[] that will hold the longest prefix suffix values for pattern
    vector<int>lps(m);
    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, m, lps);
  
    int i = 0; // index for txt
    int j = 0; // index for pat
    while (i < n) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
  
        if (j == m) {
            index.push_back(i-j);
            j = lps[j - 1];
        }
  
        // mismatch after j matches
        else if (i < n && pat[j] != txt[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}
    int strStr(string haystack, string needle) {
        vector<int>index;//store all matching first index
        KMPSearch(needle,haystack,index);
        if(index.size()==0)return -1;
        else  return index[0];
    }
};
